from pydantic import BaseModel
from typing import Optional, List
import wikipedia


class InstitutionDetails(BaseModel):
    name: str
    founder: Optional[str] = None
    founded_year: Optional[str] = None
    branches: Optional[List[str]] = None
    number_of_employees: Optional[str] = None
    summary: str


def extract_institution_details(name: str, summary: str) -> InstitutionDetails:
    """Extract structured details from a Wikipedia summary."""
    return InstitutionDetails(
        name=name,
        founder=None,
        founded_year=None,
        branches=None,
        number_of_employees=None,
        summary=summary,
    )


def main() -> None:
    institution = input("Enter institution name: ")
    try:
        # auto_suggest=False avoids unwanted redirects
        summary = wikipedia.summary(institution, sentences=4, auto_suggest=False)
        result = extract_institution_details(institution, summary)

        # Pydantic v2:
        print(result.model_dump_json(indent=4))
        # If youâ€™re on Pydantic v1, use:  print(result.json(indent=4))

    except wikipedia.exceptions.PageError:
        print(f"Error: No Wikipedia page found for '{institution}'.")
    except wikipedia.exceptions.DisambiguationError as e:
        print(
            f"Error: Multiple matches found. "
            f"Try a more specific name. Options: {e.options}"
        )
    except Exception as e:
        print(f"Failed to fetch Wikipedia data: {e}")


if __name__ == "__main__":
    main()
